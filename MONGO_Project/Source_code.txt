//server.js

const express=require('express');
const mongoose=require('mongoose');
const dotenv=require('dotenv');
const bodyParser=require('body-parser');

dotenv.config();

const app=express();
app.use(bodyParser.json());

const adminRoutes=require('./routes/admin');
const bookRoutes=require('./routes/book');

app.use('/api/admin',adminRoutes);
app.use('/api/books',bookRoutes);

mongoose.connect(process.env.MONGO_URI,{
useNewUrlParser: true,
useUnifiedTopology: true
})
.then(()=>console.log('MongoDB connected'))
.catch((err)=>console.error('MongoDB connection error',err));

const PORT=process.env.PORT || 5000;
app.listen(PORT,()=>console.log(`Server running on port ${PORT}`));

//auth.js

const jwt=require('jsonwebtoken');

function verifyToken(req,res,next){
const authHeader=req.headers.authorization;
if(!authHeader) return res.status(401).json({message:'Access Denied: No token provided'});

const token=authHeader.split(' ')[1];

try{
const verified=jwt.verify(token, process.env.JWT_SECRET);
req.admin=verified;
next();
}catch(err){
res.status(403).json({message: 'Invalid token'});
}
}

module.exports=verifyToken;


//model/Admin.js

const mongoose=require('mongoose');
const adminSchema=new mongoose.Schema({
email: {
type: String,
required: true,
unique: true
},
password:{
type: String,
required: true
}
});

module.exports=mongoose.model('Admin',adminSchema);


//model/Book.js

const mongoose=require('mongoose');

const bookSchema=new mongoose.Schema({
title: String,
author: String,
genre: String,
published_year: Number,
status: {
type: String,
enum: ['available','rented'],default:'available'
}
});
module.exports=mongoose.model('Book',bookSchema);


//routes/admin.js

const mongoose=require('mongoose');

const bookSchema=new mongoose.Schema({
title: String,
author: String,
genre: String,
published_year: Number,
status: {
type: String,
enum: ['available','rented'],default:'available'
}
});
module.exports=mongoose.model('Book',bookSchema);


//routes/book.js

const express=require('express');
const router=express.Router();
const Book=require('../models/Book');
const verifyToken=require('../middleware/auth');

//Add a book
router.post('/add',verifyToken, async (req, res) =>{
const bookData=req.body;

try{
if(Array.isArray(bookData)){
const insertedBooks=await Book.insertMany(bookData);
res.status(201).json({message: 'Books added',bookData: insertedBooks});
}else{
const newBook= new Book(bookData);
await newBook.save();
res.status(201).json({message: 'Book added',bookData: newBook});
}} catch (err){
res.status(500).json({message: 'Error adding book'});
}
});

//View all books
router.get('/view',verifyToken, async(req,res)=>{

try{
const books=await Book.find();
res.status(200).json(books);
}catch(err){
res.status(500).json({message: 'Error fetching books'});
}
});

//Delete book
router.delete('/delete:id',verifyToken, async(req,res)=>{
try{
await Book.findByIdAndDelete(req.params.id);
res.status(200).json({message:'Book deleted'});
} catch(err){
res.status(500).json({message:'Error deleting book'});
}
});

//Update book
router.put('/update:id',verifyToken, async(req,res)=>{
try{
const updatedBook=await Book.findByIdAndUpdate(req.params.id,req.body,{new:true});
res.status(200).json({message: 'Book updated',book: updatedBook});
}catch(err){
res.status(500).json({message: 'Error deleting book'});
}
});

module.exports=router;


